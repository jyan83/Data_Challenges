# -*- coding: utf-8 -*-
"""Yammer.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1eyc01oI8XrKCarsYi1m9G4DTqYi87klS

# Yammer

## Introduction
### Problem
The social network, Yammer, has a drop in the latest activity on the user engagement dashboards. This is an investigation of what is the causes of drop in user engagement and what are the corresponding solutions.

### Approach


### Result

## Data Preparation
### Overview of the tables
"""

# Load modules
import pandas as pd
import numpy as np
from datetime import datetime, date
import matplotlib.pyplot as plt

"""This table includes one row per user, with descriptive information about that userâ€™s account.
![alt text](https://github.com/jyan83/Data_Challenges/blob/master/Yammer/users.PNG?raw=true)
"""

# Import user table
url = "yammer_users.csv"
df_users = pd.read_csv(url)
df_users.head()

"""This table includes one row per event, where an event is an action that a user has taken on Yammer. These events include login events, messaging events, search events, events logged as users progress through a signup funnel, events around received emails.
![alt text](https://github.com/jyan83/Data_Challenges/blob/master/Yammer/events.PNG?raw=true)
"""

# Import events table
url = "yammer_events.csv"
df_events = pd.read_csv(url)
df_events.head()

"""This table contains events specific to the sending of emails. It is similar in structure to the events table above.
![alt text](https://github.com/jyan83/Data_Challenges/blob/master/Yammer/emails.PNG?raw=true)
"""

# Import emails table
url = "yammer_emails.csv"
df_emails = pd.read_csv(url)
df_emails.head()

"""The final table is a lookup table that is used to create rolling time periods. Though you could use
the INTERVAL() function, creating rolling time periods is often easiest with a table like this. You
won't necessarily need to use this table in queries that you write, but the column descriptions
are provided here so that you can understand the query that creates the chart shown above.

![alt text](https://github.com/jyan83/Data_Challenges/blob/master/Yammer/rollup.PNG?raw=true)
"""

# Import Rollup Periods table
url = "dimension_rollup_periods.csv"
df_rollup = pd.read_csv(url)
df_rollup.head()

"""### List of possible problems
* Might be a holiday?
* Do you have a new product coming out?
* Does the marketing team changed the strategy?
* Does anyone made a bad comment about Yammer?
* Is data collected corretly?

#### Analysis 1 - Might be a holiday?
"""

# Keep only date part
# Keep only date part
df_users['activated_at']= pd.to_datetime(df_users['activated_at']).dt.date
df_users['created_at']=pd.to_datetime(df_users.created_at).dt.date

# select the time period for investiagtion
time_selected=df_users[(df_users.created_at >= date(2014,5,1)) & (df_users.created_at <= date(2014,9,2))]

# Visualize the users that are active at this period & first signup users
activated_at_series=time_selected.groupby('created_at')['activated_at'].count()

user_id_series=time_selected.groupby('created_at')['user_id'].count()

plt.figure()
plt.plot(activated_at_series, label = 'activated users')
plt.plot(activated_at_series.rolling(7).mean(), linestyle = '--', label= 'activated users MA 7 days')
plt.plot(user_id_series, label = 'first sign up')
plt.plot(user_id_series.rolling(7).mean(), linestyle = '--', label= 'first sign up MA 7 days')
plt.xticks(rotation=90)
plt.title('date from ' + str(date(2014,5,1)) + ' to ' +  str(date(2014,9,2)))
plt.legend(loc='best')
plt.show()


#%% holidays
## Import holidays
import holidays
US_holidays = sorted(holidays.US(years=2014).items())

users = activated_at_series
users['count'] = activated_at_series.values + user_id_series.values
users = users.drop(['count'], axis=0)
        
# adding weekend and holiday features.
# discount happening before 7 days of the holidays
US_holidays

event_list = set(df_events['event_name'])
df_events['occurred_at']= pd.to_datetime(df_events['occurred_at']).dt.date

# select the time period for investiagtion
time_selected_5 = df_events[(df_events.occurred_at >= date(2014,5,1)) & (df_events.occurred_at <= date(2014,6,1))]
time_selected_6 = df_events[(df_events.occurred_at >= date(2014,6,1)) & (df_events.occurred_at <= date(2014,7,1))]
time_selected_7 = df_events[(df_events.occurred_at >= date(2014,7,1)) & (df_events.occurred_at <= date(2014,8,1))]
time_selected_8 = df_events[(df_events.occurred_at >= date(2014,8,1)) & (df_events.occurred_at <= date(2014,9,1))]

# Visualize the users that are active at this period & first signup users
activated_at_series_5=time_selected_5['event_name'].value_counts()
activated_at_series_6=time_selected_6['event_name'].value_counts()
activated_at_series_7=time_selected_7['event_name'].value_counts()
activated_at_series_8=time_selected_8['event_name'].value_counts()

diff1 = activated_at_series_6.values - activated_at_series_5.values
diff2 = activated_at_series_7.values - activated_at_series_6.values
diff3 = activated_at_series_8.values - activated_at_series_7.values

x = np.arange(len(event_list))/1.5

ax = plt.subplot(111)
plt.bar(x-0.2, diff1, width=0.2, color='b', align='center')
plt.bar(x,diff2, width=0.2, color='g', align='center')
plt.bar(x+0.2, diff3, width=0.2, color='r', align='center')
plt.xticks(x, activated_at_series_5.index)
plt.xticks(rotation=90)
plt.title('date from ' + str(date(2014,5,1)) + ' to ' +  str(date(2014,9,2)))
plt.legend(('5-6', '6-7', '7-8'))
plt.show()
    
x = np.arange(len(event_list))
ax = plt.subplot(111)
plt.bar(x-0.4, activated_at_series_5.values, width=0.2, color='y', align='center')
plt.bar(x-0.2, activated_at_series_6.values, width=0.2, color='b', align='center')
plt.bar(x,activated_at_series_7.values, width=0.2, color='g', align='center')
plt.bar(x+0.2, activated_at_series_8.values, width=0.2, color='r', align='center')
plt.xticks(x, activated_at_series_5.index)
plt.xticks(rotation=90)
plt.title('event counts difference')
plt.legend(('May','June', 'July', 'Aug'))
plt.show()


## Email
df_emails['occurred_at']= pd.to_datetime(df_emails['occurred_at']).dt.date

weekly = []
email_open = []
email_click = []

# get the action counts for the four months
for i in range(4):
    if i == 0:
        emails = df_emails[(df_emails.occurred_at >= date(2014,5,1)) & (df_emails.occurred_at <= date(2014,6,1))]
    elif i == 1:
        emails = df_emails[(df_emails.occurred_at >= date(2014,6,1)) & (df_emails.occurred_at <= date(2014,7,1))]
    elif i == 2:
        emails = df_emails[(df_emails.occurred_at >= date(2014,7,1)) & (df_emails.occurred_at <= date(2014,8,1))]
    elif i == 3:
        emails = df_emails[(df_emails.occurred_at >= date(2014,8,1)) & (df_emails.occurred_at <= date(2014,9,1))]
    weekly.append(emails[emails['action'] == 'sent_weekly_digest'].user_id.size)
    email_open.append(emails[emails['action'] == 'email_open'].user_id.size)
    email_click.append(emails[emails['action'] == 'email_clickthrough'].user_id.size)

# plot
x = np.arange(4)
ax = plt.subplot(111)
plt.bar(x-0.2, weekly, width=0.2, color='b', align='center')
plt.bar(x, email_open, width=0.2, color='g', align='center')
plt.bar(x+0.2, email_click, width=0.2, color='r', align='center')
plt.xticks(x, ('May','June', 'July', 'Aug'))
plt.xticks(rotation = 0)
plt.title('email action difference')
plt.legend(('weekly digest', 'open', 'clickthrough'))
plt.show()



device = df_events[(df_events.event_type=='engagement')]
device.device.unique()

phone = ['iphone 5', 'iphone 4s', 'iphone 5s', 'samsung galaxy s4', 'htc one', 'amazon fire phone', 'nokia lumia 635']
desktop =['dell inspiron notebook', 'windows surface', 'macbook air', 'macbook pro', 'lenovo thinkpad', 'mac mini', 'hp pavilion desktop', 'dell inspiron desktop', 'acer aspire desktop']
tablet = ['windows surface', 'samsumg galaxy tablet', 'ipad air', 'nexus 10']

IOS = ['iphone 5', 'iphone 4s', 'iphone 5s', 'macbook air', 'macbook pro', 'mac mini', 'ipad air']
Windows = ['dell inspiron notebook', 'windows surface', 'lenovo thinkpad', 'hp pavilion desktop', 'dell inspiron desktop', 'acer aspire desktop', 'windows surface']
Android = ['samsung galaxy s4', 'htc one', 'amazon fire phone', 'nokia lumia 635', 'samsumg galaxy tablet', 'nexus 10']


phone_count = []
desktop_count = []
tablet_count = []
IOS_count = []
Windows_count = []
Android_count = []

# get the action counts for the four months
for i in range(4):
    if i == 0:
        time_selected = time_selected_5
    elif i == 1:
        time_selected = time_selected_6
    elif i == 2:
        time_selected = time_selected_7
    elif i == 3:
        time_selected = time_selected_8
    phone_count.append(np.sum([x == time_selected['device'] for x in phone]))
    desktop_count.append(np.sum([x == time_selected['device'] for x in desktop]))
    tablet_count.append(np.sum([x == time_selected['device'] for x in tablet]))
    IOS_count.append(np.sum([x == time_selected['device'] for x in IOS]))
    Windows_count.append(np.sum([x == time_selected['device'] for x in Windows]))
    Android_count.append(np.sum([x == time_selected['device'] for x in Android]))

# plot
x = np.arange(4)
ax = plt.subplot(121)
plt.bar(x-0.2, phone_count, width=0.2, color='b', align='center')
plt.bar(x, desktop_count, width=0.2, color='g', align='center')
plt.bar(x+0.2, tablet_count, width=0.2, color='r', align='center')
plt.xticks(x, ('May','June', 'July', 'Aug'))
plt.xticks(rotation = 0)
plt.title('device difference')
plt.legend(('mobile', 'desktop', 'tablet'))
plt.show()

# plot
x = np.arange(4)
ax = plt.subplot(122)
plt.bar(x-0.2, IOS_count, width=0.2, color='b', align='center')
plt.bar(x, Windows_count, width=0.2, color='g', align='center')
plt.bar(x+0.2, Android_count, width=0.2, color='r', align='center')
plt.xticks(x, ('May','June', 'July', 'Aug'))
plt.xticks(rotation = 0)
plt.title('email action difference')
plt.legend(('IOS', 'Windows', 'Android'))
plt.show()